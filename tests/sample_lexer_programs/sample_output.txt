sample1.litel:
<KEYWORD, make>
<IDENTIFIER, x>
<OPERATOR, =>
<INTLITERAL, 10>
<SEMICOLON, ;>
<KEYWORD, shout>
<LPAR, (>
<STRINGLITERAL, "Hello World">
<RPAR, )>
<SEMICOLON, ;>
<KEYWORD, if>
<LPAR, (>
<IDENTIFIER, x>
<OPERATOR, <>
<INTLITERAL, 20>
<RPAR, )>
<LBRACE, {>
<KEYWORD, shout>
<LPAR, (>
<STRINGLITERAL, "x is less than 20">
<RPAR, )>
<SEMICOLON, ;>
<RBRACE, }>


sample2.litel:
<KEYWORD, make>
<IDENTIFIER, x>
<OPERATOR, =>
<FLOATLITERAL, 5.00>
<SEMICOLON, ;>
<KEYWORD, make>
<IDENTIFIER, y>
<OPERATOR, =>
<FLOATLITERAL, 10.00>
<SEMICOLON, ;>
<KEYWORD, shout>
<LPAR, (>
<STRINGLITERAL, "The value of x is: ">
<RPAR, )>
<SEMICOLON, ;>
<KEYWORD, shout>
<LPAR, (>
<IDENTIFIER, x>
<RPAR, )>
<SEMICOLON, ;>
<KEYWORD, shout>
<LPAR, (>
<STRINGLITERAL, "The value of y is: ">
<RPAR, )>
<SEMICOLON, ;>
<KEYWORD, shout>
<LPAR, (>
<IDENTIFIER, y>
<RPAR, )>
<SEMICOLON, ;>


sample3.litel:
<KEYWORD, make>
<IDENTIFIER, count>
<OPERATOR, =>
<INTLITERAL, 0>
<SEMICOLON, ;>
<KEYWORD, check>
<LPAR, (>
<IDENTIFIER, count>
<OPERATOR, <>
<INTLITERAL, 5>
<RPAR, )>
<LBRACE, {>
<KEYWORD, shout>
<LPAR, (>
<STRINGLITERAL, "Count is: ">
<RPAR, )>
<SEMICOLON, ;>
<KEYWORD, shout>
<LPAR, (>
<IDENTIFIER, count>
<RPAR, )>
<SEMICOLON, ;>
<IDENTIFIER, count>
<OPERATOR, =>
<IDENTIFIER, count>
<OPERATOR, +>
<INTLITERAL, 1>
<SEMICOLON, ;>
<RBRACE, }>


sample4.litel:
<KEYWORD, make>
<IDENTIFIER, x>
<OPERATOR, =>
<INTLITERAL, 10>
<SEMICOLON, ;>
<KEYWORD, def>
<IDENTIFIER, haha>
<LPAR, (>
<IDENTIFIER, x>
<COMMA, ,>
<IDENTIFIER, y>
<RPAR, )>
<LBRACE, {>
<IDENTIFIER, x>
<OPERATOR, =>
<IDENTIFIER, x>
<OPERATOR, +>
<INTLITERAL, 1>
<SEMICOLON, ;>
<IDENTIFIER, y>
<OPERATOR, =>
<IDENTIFIER, y>
<OPERATOR, +>
<IDENTIFIER, x>
<SEMICOLON, ;>
<KEYWORD, return>
<IDENTIFIER, y>
<SEMICOLON, ;>
<RBRACE, }>
<KEYWORD, make>
<IDENTIFIER, n>
<OPERATOR, =>
<KEYWORD, call>
<IDENTIFIER, haha>
<LPAR, (>
<IDENTIFIER, x>
<COMMA, ,>
<INTLITERAL, 5>
<RPAR, )>
<OPERATOR, +>
<INTLITERAL, 10>
<SEMICOLON, ;>


sample5.litel:
<KEYWORD, make>
<IDENTIFIER, x>
<OPERATOR, =>
<INTLITERAL, 0>
<OPERATOR, +>
<LPAR, (>
<INTLITERAL, 1>
<OPERATOR, +>
<LPAR, (>
<INTLITERAL, 2>
<OPERATOR, ->
<INTLITERAL, 3>
<RPAR, )>
<RPAR, )>
<OPERATOR, *>
<INTLITERAL, 4>
<SEMICOLON, ;>


sample6.litel:
<KEYWORD, make>
<IDENTIFIER, integers>
<OPERATOR, =>
<LBRACKET, [>
<INTLITERAL, 1>
<COMMA, ,>
<INTLITERAL, 2>
<COMMA, ,>
<INTLITERAL, 3>
<RBRACKET, ]>
<SEMICOLON, ;>
<KEYWORD, make>
<IDENTIFIER, strings>
<OPERATOR, =>
<LBRACKET, [>
<STRINGLITERAL, "haha">
<COMMA, ,>
<STRINGLITERAL, "hehe">
<COMMA, ,>
<STRINGLITERAL, "hoho">
<RBRACKET, ]>
<SEMICOLON, ;>
<KEYWORD, make>
<IDENTIFIER, x>
<OPERATOR, =>
<IDENTIFIER, integers>
<LBRACKET, [>
<INTLITERAL, 0>
<RBRACKET, ]>
<SEMICOLON, ;>
<IDENTIFIER, integers>
<LBRACKET, [>
<INTLITERAL, 0>
<RBRACKET, ]>
<OPERATOR, =>
<INTLITERAL, 4>
<SEMICOLON, ;>


sample7.litel:
Lexical error: Invalid token starting with a number at position 14.


sample8.litel:
Lexical error: Unterminated string literal at position 91.
